Timezones, i18n, l10n & Internationalization

Dealing with & Building for
13 Oct 2016
Tags: timezones, i18n, l10n, internationalization

Dean Karn
COO development, MetricAid Inc.
Dean.Karn@metricaid.com
http://www.metricaid.com
@dean_karn

* Time & Humans

So why is time such a big deal and why is it so complicated? Well it's a problem of our own making

- Speed of travel, we can travel faster than the earth rotates.
- Being so obsessed with time...and money
- Complicated by daylight savings time! what! time can jump forward or backward? oh that doesn't complicate things at all...
- How humans refer to and consume time, is not how we store it.

* Example 1

We say the Monday shift is from 4 to midnight; simple enough right.

In reality though it's a bit different as midnight is really the start of Tuesday; I know it seems like a trivial distinction, until you start querying and aggregating data from the database.

In reality we'd probably store it as the smallest unit, nanoseconds, before midnight.

	// example int UTC with ms precision

	4        - 2016-01-01 16:00:00.000000000 +0000 UTC
	midnight - 2016-01-01 23:59:59.999999999 +0000 UTC

So the way we talk about time isn't how we store it in this example

* Example 2

We say that your work schedule is from January 1st to the 31st, again simple enough right, everyone understands that.

We understand to the 31st includes the entire day of the 31st, but that's not how we'd store it...

We would store the 1st as midnight of that day and the 31st as the smallest unit, nanoseconds, before midnight of the next day to properly include all of the time in the date range; again it seems trivial untill querying and aggregating data.

	// example int UTC with ms precision

	1st  - 2016-01-01 16:00:00.000000000 +0000 UTC
	31st - 2016-01-31 23:59:59.999999999 +0000 UTC

* Time & Humans Summary

So as you can see with just a couple of *simple* examples that humans talk about and consume time information differently than it is stored.

There are I'm sure many more complex scenarios, but most of them tend to stem from the same issues as the following two examples demonstrated.

* Daylight Savings Time

Daylight saving time (DST) or summer time is the practice of advancing clocks during summer months by one hour so that evening daylight lasts an hour longer, while sacrificing normal sunrise times. [[https://en.wikipedia.org/wiki/Daylight_saving_time]]

This practive, for pure human convenience, wreaks havoc on the realities of time and systems that rely on it.

See the next examples regarding patient visits in the ER

* Example 1

You record a patients visit to the ER 5 minutes prior the the clocks turning back, let's call it visit #1, and then record another patient visit 5 minutes after the clocks turn back, let's call it visit #2.

So visit #2 happened after visit #1, but that's not what the visits timestamp will say, it will actually record visit #2 as happening before visit #1 when recording in the local time.

Daylight Savings Time is causing problems here, and this is a simple example, in actuality there are many timestamps within a single patient visit such as:

- Registration
- Assessment (Physician sees patient)
- Disposition (Going Home, Being Admitted...)

* Example 2

So here's an even worse scenario regarding a single patients visit which took less than an hour.

So the patient gets registered, is assessed by the physician within half an hour, the clocks turn back and then the patient is dispositioned 5 minutes afterward.

So now the record shows that the patient went home before arriving at the hospital and seeing a physician; wait what? that doesn't even make any sense!

Daylight Savings Time sucks!

* How To Gain Control

So how do we deal with Daylight Savings Time? Well there are a couple ways I'm aware of:

1. Write some pretty complicated logic that will check every timestamp to try and predict time changes; but even this is not ideal because as seen in example #2 it's more than one timestamp that would be affected and so this logic would have to be done on a case by case basis.

2. UTC to the rescue! wouldn't it be nice if we could store time where there is no Daylight Savings Time and no Timezone offset... oh right there is at GMT (Greenwich Mean Time), also referred to as UTC (Coordinated Universal Time).

UTC! the light at the end of the ... with some caveats

* UTC, What Caveats

#1 rule if using UTC is ensure your system time/hardware clock is set to UTC!

Most, if not all, programming languages assume you want Time in the local system time, for example:

	// this will return the current time, with the System Time's local
	time.Now()

	// this will give us UTC but after intially applying the local time
	time.Now().UTC()

	// this will do esentially the opposite of the above turning UTC into local time after parsing
	time.Unix(seconds, nanoseconds)

So to avoid our problem of Daylight Savings Time, the System Time must be set to UTC to avoid the time ever being in a Timezone that has Daylight Savings Time and the potential time jump; if you don't do this, look out there be dragons!

* Before continuing

OK now so it I've been talking like you should always store your time in UTC, I think you should, however it's not always necessary either; it depends on the complexity of your application.


